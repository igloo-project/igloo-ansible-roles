- name: catalina_base iteration
  vars:
    _catalina_base_path: "{{ catalina_base.path | default((tomcat_catalina_base_root, catalina_base.name) | join('/')) }}"
    _catalina_base_user: "{{ catalina_base.user | default(tomcat_default_user) }}"
    _catalina_base_group: "{{ catalina_base.group | default(tomcat_default_group) }}"
    _catalina_base_java_home: "{{ catalina_base.java_home | default(tomcat_default_java_home) }}"
  block:
    - name: tomcat · catalina_base · directory "{{ _catalina_base_path }}"
      file:
        path: "{{ item }}"
        owner: "{{ _catalina_base_user }}"
        group: "{{ _catalina_base_group }}"
        mode: u=rwx,g=rwx,o=rx
        state: directory
      with_items:
        - "{{ _catalina_base_path }}"

    - name: tomcat · catalina_base · subdirectories "{{ _catalina_base_path }}"
      file:
        path: "{{ item }}"
        owner: "{{ _catalina_base_user }}"
        group: "{{ _catalina_base_group }}"
        mode: u=rwx,g=rx,o=rx
        state: directory
      with_items:
        - "{{ _catalina_base_path }}/bin"
        - "{{ _catalina_base_path }}/conf"
        - "{{ _catalina_base_path }}/lib"
        - "{{ _catalina_base_path }}/logs"
        - "{{ _catalina_base_path }}/webapps"
        - "{{ _catalina_base_path }}/work"
        - "{{ _catalina_base_path }}/temp"
        - "{{ _catalina_base_path }}/pid"

    - name: configuration tomcat (server.xml updated)
      template:
        src: "{{ _catalina_base_server_xml }}"
        dest: "{{ _catalina_base_path }}/conf/server.xml"
        owner: "{{ _catalina_base_user }}"
        group: "{{ _catalina_base_user }}"
        mode: u=rw,g=rw,o=r
      when: _catalina_base_server_xml != False

    # conf/ file inventory
    - name: tomcat · catalina_base · {{ tomcat_dest }}/conf/ inventory"
      find:
        recurse: no
        paths:
          - "{{ tomcat_dest }}/conf"
        file_type: file
      register: catalina_home_files

    # current {catalina_base}/conf/ status
    - name: "tomcat · catalina_base · files {{ _catalina_base_path }}"
      stat:
        path: "{{ _catalina_base_path }}/{{ item.path | relpath(tomcat_dest) }}"
      with_items: "{{ catalina_home_files.files }}"
      loop_control:
        label: "{{ item.path | relpath(tomcat_dest) }}"
      register: catalina_base_files

    # copy missing conf/ files by using catalina_home as source
    - name: "tomcat · catalina_base · init file {{ _catalina_base_path }}"
      copy:
        dest: "{{ _catalina_base_path }}/{{ item.item.path | relpath(tomcat_dest) }}"
        src: "{{ tomcat_dest }}/{{ item.item.path | relpath(tomcat_dest) }}"
        remote_src: yes
        owner: "{{ _catalina_base_user }}"
        group: "{{ _catalina_base_group }}"
        mode: u=rw,g=rw,o=r
      with_items: "{{ catalina_base_files.results }}"
      loop_control:
        label: "{{ item.item.path | relpath(tomcat_dest) }}"
      when: not item.stat.exists and not item.invocation.module_args.path | basename == 'logging.properties'

    # tomcat needs at least the global web.xml
    - name: tomcat · catalina_base · copy web.xml
      copy:
        src: "{{ tomcat_dest }}/conf/web.xml"
        dest: "{{ _catalina_base_path }}/conf/web.xml"
        owner: "{{ _catalina_base_user }}"
        group: "{{ _catalina_base_group }}"
        remote_src: yes
        force: no

    # PROMETHEUS_EXPORTER_OPTS may be set by a custom service environment override
    # glowroot must start before prometheus_exporter agent
    - name: tomcat · catalina_base · service configuration file
      template:
        src: setenv.sh.j2
        dest: "{{ _catalina_base_path }}/bin/setenv.sh"
        owner: "{{ _catalina_base_user }}"
        group: "{{ _catalina_base_group }}"
        mode: u=rw,g=rw,o=r
      notify:
        - tomcat.restart
        - tomcat.restart.skipped
      vars:
        _java_home: "{{ _catalina_base_java_home }}"

    - name: tomcat · catalina_base · service configuration directory
      file:
        path: /etc/systemd/system/tomcat@{{ catalina_base.name }}.service.d
        state: directory
        owner: root
        group: root
        mode: u=rwx,g=rx,o=rx

    - name: tomcat · catalina_base · service configuration file
      copy:
        dest: /etc/systemd/system/tomcat@{{ catalina_base.name }}.service.d/10-default.conf
        owner: root
        group: root
        mode: u=rw,g=rw,o=r
        content: "{{ _tomcat_systemd_env }}"
      notify:
        - systemd.daemon-reload
        - tomcat.restart
        - tomcat.restart.skipped
      vars:
        _catalina_home: "{{ tomcat_dest }}"
        _catalina_base: "{{ _catalina_base_path }}"
        _java_home: "{{ _catalina_base_java_home }}"

    - name: tomcat · catalina_base · service configuration file · clean script
      copy:
        dest: /etc/systemd/system/tomcat@{{ catalina_base.name }}.service.d/10-clean.conf
        owner: root
        group: root
        mode: u=rw,g=r,o=r
        content: |
          [Service]
          ExecStartPre={{ _catalina_base_path }}/bin/clean.sh
      when: catalina_base.clean_on_start | default(False)
      notify: systemd.daemon-reload

    - name: tomcat · catalina_base · service configuration file · clean script
      file:
        state: absent
        path: /etc/systemd/system/tomcat@{{ catalina_base.name }}.service.d/10-clean.conf
      when: not (catalina_base.clean_on_start | default(False))
      notify: systemd.daemon-reload

    - name: tomcat · catalina_base · clean script
      copy:
        src: clean.sh
        dest: "{{ _catalina_base_path }}/bin/clean.sh"
        owner: root
        group: root
        mode: u=rwx,g=rx,o=rx
      when: catalina_base.clean_on_start | default(False)

    - name: tomcat · systemd configuration
      systemd:
        name: tomcat@{{ catalina_base.name }}
        daemon_reload: "{{ service_file.changed }}"
        enabled: true
        # state: "{{ 'restarted' if service_file.changed else 'started' }}"

    - name: tomcat · sudoers
      lineinfile:
        dest: /etc/sudoers
        line: "{{ item.line }}"
        regexp: "^{{ item.line }}"
        insertafter: EOF
        state: present
      with_items:
        - { line: '# {{ playbook_remote_user }} user' }
        - { line: '{{ playbook_remote_user }} ALL=NOPASSWD: {{ _systemctl_command }} restart tomcat@{{playbook_application_name}}' }
        - { line: '{{ playbook_remote_user }} ALL=NOPASSWD: {{ _systemctl_command }} start tomcat@{{playbook_application_name}}' }
        - { line: '{{ playbook_remote_user }} ALL=NOPASSWD: {{ _systemctl_command }} stop tomcat@{{playbook_application_name}}' }
        - { line: '{{ playbook_remote_user }} ALL=NOPASSWD: {{ _systemctl_command }} status tomcat@{{playbook_application_name}}' }
