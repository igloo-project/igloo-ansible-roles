---
- name: lxml Â· allow xml parsing
  package:
    name: python-lxml
  become: yes
  become_user: root

- name: prepare download folder
  file:
    path: "{{ _elasticsearch_download_target | dirname }}"
    state: directory
  become: yes
  become_user: root

- name: download
  get_url:
    url: "{{ _elasticsearch_download_url }}"
    dest: "{{ _elasticsearch_download_target }}"
  become: yes
  become_user: root

- name: prepare home folder
  file:
    path: "{{ _elasticsearch_install_dest }}"
    state: directory
  become: yes
  become_user: root

- name: extract
  unarchive:
    src: "{{ _elasticsearch_download_target }}"
    remote_src: yes
    dest: "{{ _elasticsearch_install_dest }}"
    exclude:
      - "config/elasticsearch.yml"
    extra_opts:
      - --strip-components=1
  become: yes
  become_user: root

- name: base folder
  file:
    path: "{{ path }}"
    state: directory
    mode: u=rwX
    owner: "{{ _elasticsearch_user }}"
    group: "{{ _elasticsearch_group }}"
  with_items:
    - "{{ _elasticsearch_base_path }}"
    - "{{ _elasticsearch_conf_path }}"
    - "{{ _elasticsearch_data_path }}"
    - "{{ _elasticsearch_scripts_path }}"
    - "{{ _elasticsearch_plugins_path }}"
    - "{{ _elasticsearch_logs_path }}"
  loop_control:
    loop_var: path
  become: yes
  become_user: root

- name: config file
  template:
    src: elasticsearch.conf.j2
    dest: "{{ _elasticsearch_conf_path }}/elasticsearch.yml"
    owner: "{{ _elasticsearch_user }}"
    group: "{{ _elasticsearch_group }}"
    mode: u=rw

- name: logging.yml file (check)
  stat:
    path: "{{ _elasticsearch_conf_path }}/logging.yml"
  register: logging_stat

- name:
  copy:
    src: "{{ _elasticsearch_install_dest }}/config/logging.yml"
    remote_src: yes
    dest: "{{ _elasticsearch_conf_path }}/logging.yml"
    owner: "{{ _elasticsearch_user }}"
    group: "{{ _elasticsearch_group }}"
    mode: u=rw
  when: not logging_stat.stat.exists

- name: plugins
  include: plugin.yml
  with_items: "{{ _elasticsearch_plugins }}"
  loop_control:
    loop_var: plugin
    label: "{{ plugin.name }}"

- name: ensure systemd service configuration
  become: yes
  become_user: root
  template:
    src: elasticsearch.service.j2
    dest: /etc/systemd/system/{{ _elasticsearch_unit_name }}.service
    mode: u=rw,g=rw,o=r
  notify: elasticsearch.systemd.daemon_reload

- name: enable service
  become: yes
  become_user: root
  service:
    name: "{{ elasticsearch_unit_name }}"
    enabled: yes
    state: started
